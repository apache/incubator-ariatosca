
CTX API:
_WorkflowContextBase:
	1. graph_mode - return task_graph class and change mode to "graph_mode" (in Aria we will remove graph-mode...)
	2. bootstrap_context - return bootstrap_context (in Aria we will remove...)
	3. internal - return internal (in Aria we will remove...)
	4. execution_id - context execution id
	5. workflow_id - context wofklow id
	6. local - context is local execution (Maybe remove - it shouldn't change if local or not)
	7. logger - contextual logger - Aria implements with LoggerMixin
	8. send_event - sends an event to rabbitMQ. - in Aria we will use events (in relevant tasks...)
	9. update_execution_status - remove in Aria mayby use events?, maybe move to task level
	10. execute_task - remove from ctx - in Aria it will be a part of the executor...
	11. local_task -  remove from ctx - in Aria it will be a part of the executor...
	12. remote_task -  remove from ctx - in Aria it will be a part of the executor...
----------------------------------------------------------------------------------------------------------------------------
WorkflowNodesAndInstancesContainer:
	13. nodes - iterator that every item = CloudifyWorkflowNode (In Aria CloudifyWorkflowNode == aria.storage.models.Node)
	14. nodes_instances - iterates over a list of CloudifyWorkflowNodeInstance (In Aria CloudifyWorkflowNodeInstance == aria.storage.models.NodeInstance)
	15. get_node - returns the node by Id from the list. Will directly derive from the Nodes in Aria storage.models module
	16. get_node_instance - returns the node by Id from the list. Will directly derive from the NodesInstance in Aria storage.models module
	(*) WorkflowNodesAndInstancesContainer => Node, NodeInstance
		WorkflowNodesAndInstancesContainer.get_node == Node.get (storage.models.Node)
		WorkflowNodesAndInstancesContainer.get_node_instanse == NodeInstance.get (storage.models.NodeInstance)
	17*. redesign node/nodeInstance trees... (do we need relationship class / )  

(*) Maybe for ctx we can use the storage model/field classes but without the "db..." (just clean api)
     Or maby create readOnly model (no db)
	18. CloudifyWorkflowRelationshipInstance and CloudifyWorkflowRelationship - remove in Aria because in here we use relationship and nod and node_instance api but add execution api that we dohn't want here...
		
when ctx initializated we query all nodes and node_instances,
in the new Aria code we will:
	1. lazy query
	2. maybe cache with TTL???


	19. blueprint - Holds the blurpint_id and the blueprint itself. will be replaced in aria using the models.Blueprint class
	20. deployment - Holds the deployment_id and workflow_context, isn't really required.
		a. start_modification - needs to be removed, and the workflow engine used instead.
		b. scaling_groups - could be removed, and the value could be extracted models.
----------------------------------------------------------------------------------------------------------------------------
CloudifySystemWideWorkflowContext(_WorkflowContextBase):
    1. deployments_context - local deployment context (with lazy loading) - should be probably replaced with _WorkflowContextBase and inner lazy loading.
    2. _ManagedCloudifyWorkflowContext - tasks should not be implemented here either way, so this is not necessary.
----------------------------------------------------------------------------------------------------------------------------
CloudifyWorkflowContextInternal:
    1. get_task_configuration - retrieves task configuration - isn't really needed here, but for the task executions. Workflow engine could negotiate it directly from storage.
    2. get_subgraph_task_configuration - same as get_task_configuration.
    3. task_graph - Not needed here. part of the workflow_engine.
    4. graph_mode - Not needed here. part of the workflow_engine.
        (graph_mode setter as well)
    5. start_event_monitor - remove (reImplement in events module).
    6. stop_event_monitor - remove (reImplement in events module).
    7. send_task_event - remove (reImplement in events module).
    8. send_workflow_event - remove (reImplement in events module).
    9. start_local_tasks_processing - remove (reImplement in workflow engine as part of internal executions).
    10. stop_local_tasks_processing - remove (reImplement in workflow engine as part of internal executions).
    11. add_local_task - remove (reImplement in workflow engine as part of internal executions).
    12. workflow_context - the context for the executions.
    13. handler - a driver to the workflow type (local/remote).
    14. local_task_processor - remove (reImplement in workflow engine as part of internal executions).
----------------------------------------------------------------------------------------------------------------------------
LocalTasksProcessing: This entire class should be implemented in the workflow engine level, and not in the ctx.
                      However, not that this is for internal executions (and not local/remote workflows).
----------------------------------------------------------------------------------------------------------------------------
CloudifyWorkflowContextHandler: Abstract class for handling workflows
    1. get_context_logging_handler
    2. get_node_logging_handler
    3. bootstrap_context
    4. get_send_task_event_func
    5. get_update_execution_status_task
    6. get_send_node_event_task
    7. get_send_workflow_event_task
    8. get_task
    9. operation_cloudify_context
    10. get_set_state_task
    11. get_get_state_task
    12. send_workflow_event
    13. download_deployment_resource
    14. start_deployment_modification
    15. finish_deployment_modification
    16. rollback_deployment_modification
    17. scaling_groups
==================================
RemoteContextHandler:
    1. bootstrap_context - return the context from the storage (could access the storage directly).
    2. get_send_task_event_func - remove and replace with the events module. currently just redirects to events.
    3. get_update_execution_status_task - return a task which updates the execution state on the storage. replace with storage module.
    4. get_send_workflow_event_task - returns a task which sends an event. replace with events module.
    5. get_task - creates a celery subtask for the current execution. should be implemented in
                  the workflow engine.
    6. operation_cloudify_context - something to do with the maintenance mode, for executions to be executed.
                                    this should probably remain here - maybe add this field to the storage.
    7. get_set_state_task - return a func which sets the state of the task in the storage. should be reImplemented in the workflow engine module.
    8. get_get_state_task - returns a task which returns the state of a node instance. replace directly with models.
    9. download_deployment_resource - is there really a need for download_deployment_resource under context.
    (*) we should support a creation of a generic task. only one method is needed to create a task. and it sould
        be implemented in the workflow engine module. and not the context module.
==================================
RemoteCloudifyWorkflowContextHandler:
    1. get_node_logging_handler - replace with loggerMixin
    2. get_context_logging_handler - replace with loggerMixin
    3. download_deployment_resource - no need for resource download to be in the ctx.
    4. start_deployment_modification - starts deployment modification (adding/removing nodes). No need for that here.
    5. finish_deployment_modification - see above.
    6. rollback_deployment_modification - see above.
    7. send_workflow_event - sends custom workflow event. no need - use events module.
    8. get_send_node_event_task - returns a func which sends an event. use events module.
    9. scaling_groups - returns scaling groups - replace with directs models access.
==================================
SystemWideWfRemoteContextHandler:
    1. get_node_logging_handler - replace with loggerMixin
    7. send_workflow_event - sends custom workflow event. no need - use events module.
