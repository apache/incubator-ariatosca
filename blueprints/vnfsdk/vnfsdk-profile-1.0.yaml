
# vnfsdk-profile-1.0 (draft 5)

# Required extensions to the TOSCA Simple Profile for Network Functions Virtualization (NFV)
# Version 1.0.

relationship_types:

  vnfsdk.DependsOn:
    description: >-
      Enhances the simple profile's "DependsOn" relationship to support compute dependencies and
      indicators.
    derived_from: tosca.relationships.DependsOn
    valid_target_types:
      - tosca.capabilities.Node
    properties:
      compute_profile:
        description: >-
          The performance profile explicitly provided to the orchestrator. Values from the profile
          can be overridden in compute_dependencies.
        type: string
        required: false
      compute_dependencies:
        description: >-
          These dependencies will be used by a resource orchestrator/allocator to assign the best
          possible compute_profile.
        type: map
        entry_schema: vnfsdk.ComputeDependency
        required: false
      indicators:
        description: >-
          Performance, availability, and other indicators.
        type: map
        entry_schema: vnfsdk.Indicator
        required: false

policy_types:

  vnfsdk.Compute:
    description: >-
      Policy for compute dependencies. Contains compute profiles, which are named bundles of compute
      dependencies.
    derived_from: tosca.policies.Root
    properties:
      profiles:
        description: >-
          Compute profiles.
        type: map
        entry_schema: vnfsdk.ComputeProfile
        required: false

  vnfsdk.Allocation:
    description: >-
      The orchestrator will apply an algorithm to make sure that VDUs will be allocated the best
      possible hosts according to their compute dependencies.
    derived_from: tosca.policies.Root
    targets:
      - tosca.nodes.nfv.VDU

  vnfsdk.Placement:
    description: >-
      The orchestrator will apply an algorithm to make sure that our VIM resources will be allocated
      and placed near each other in the data center to guarantee best internal connectivity. This is
      necessary for the VNF to function as an efficient whole, despite being composed of many VIM
      resources.
    derived_from: tosca.policies.Placement
    targets:
      - tosca.nodes.Compute
      - tosca.nodes.BlockStorage

data_types:

  vnfsdk.Variant:
    description: >-
      A variant represents a generic typed value. One and only one of "string", "integer",
      "boolean", "string_map", or "integer_map" should be assigned. If this rule is not followed
      then behavior will be undefined.
    derived_from: tosca.datatypes.Root
    properties:
      string:
        description: >-
          The dependency value as a string.
        type: string
        required: false
      integer:
        description: >-
          The dependency value as an integer.
        type: integer
        required: false
      boolean:
        description: >-
          The dependency value as a boolean.
        type: boolean
        required: false
      string_map:
        description: >-
          The dependency value as a map of strings.
        type: map
        entry_schema: string
        required: false
      integer_map:
        description: >-
          The dependency value as a map of integers.
        type: map
        entry_schema: integer
        required: false

  vnfsdk.ComputeDependency:
    description: >-
      A compute dependency is represented as a variant that can be either required (the default)
      or optional.
    derived_from: vnfsdk.Variant
    properties:
      optional:
        description: >-
          Whether the compute dependency is optional.
        type: boolean
        default: false
        required: false

  vnfsdk.ComputeProfile:
    description: >-
      A compute profile is a bundle of compute dependencies.
    derived_from: tosca.datatypes.Root
    properties:
      description:
        description: >-
          An optional description of the profile.
        type: string
        required: false
      compute_dependencies:
        description: >-
          The compute dependencies in the profile.
        type: map
        entry_schema: vnfsdk.ComputeDependency
        required: false

  vnfsdk.Indicator:
    description: >-
      An indicator is a typed value generated by an implementation.
    derived_from: tosca.datatypes.Root
    properties:
      type:
        description: >-
          The type of the indicator.
        type: string
      implementation:
        description: >-
          The indicator's implementation.
        type: string
